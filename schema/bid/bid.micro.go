// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: schema/bid/bid.proto

package bid_bid

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Bid service

type BidService interface {
	// Создание заявки
	Create(ctx context.Context, in *CreateIn, opts ...client.CallOption) (*CreateOut, error)
	// Возвращает данные заявки
	Get(ctx context.Context, in *GetIn, opts ...client.CallOption) (*GetOut, error)
}

type bidService struct {
	c    client.Client
	name string
}

func NewBidService(name string, c client.Client) BidService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "bid.bid"
	}
	return &bidService{
		c:    c,
		name: name,
	}
}

func (c *bidService) Create(ctx context.Context, in *CreateIn, opts ...client.CallOption) (*CreateOut, error) {
	req := c.c.NewRequest(c.name, "Bid.Create", in)
	out := new(CreateOut)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidService) Get(ctx context.Context, in *GetIn, opts ...client.CallOption) (*GetOut, error) {
	req := c.c.NewRequest(c.name, "Bid.Get", in)
	out := new(GetOut)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bid service

type BidHandler interface {
	// Создание заявки
	Create(context.Context, *CreateIn, *CreateOut) error
	// Возвращает данные заявки
	Get(context.Context, *GetIn, *GetOut) error
}

func RegisterBidHandler(s server.Server, hdlr BidHandler, opts ...server.HandlerOption) error {
	type bid interface {
		Create(ctx context.Context, in *CreateIn, out *CreateOut) error
		Get(ctx context.Context, in *GetIn, out *GetOut) error
	}
	type Bid struct {
		bid
	}
	h := &bidHandler{hdlr}
	return s.Handle(s.NewHandler(&Bid{h}, opts...))
}

type bidHandler struct {
	BidHandler
}

func (h *bidHandler) Create(ctx context.Context, in *CreateIn, out *CreateOut) error {
	return h.BidHandler.Create(ctx, in, out)
}

func (h *bidHandler) Get(ctx context.Context, in *GetIn, out *GetOut) error {
	return h.BidHandler.Get(ctx, in, out)
}
